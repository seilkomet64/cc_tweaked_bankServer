local a=require("bankAPI")peripheral.find("modem",rednet.open)local b="bank"rednet.host(b,"bankController")local function c(d,e,f,g,h,i)local j=fs.open("bank_log.txt","a")local k=textutils.formatTime(os.time(),true)local l={string.format("[%s] ATM: %s, Request: %s, Account: %s",k,d,e,f)}if g then table.insert(l,string.format("Target Account: %s",g))end;if h then table.insert(l,string.format("Start Balance: %s",h))end;if i then table.insert(l,string.format("End Balance: %s",i))end;local m=table.concat(l,", ")j.writeLine(m)print(m)j.close()end;local function n()while true do::o::local p,m=rednet.receive(b)if not m.type or not m.acc or not m.pin and not m.type=="checkCard"then rednet.send(p,{success=false,error="Invalid Request"},b)goto o end;if m.type=="balance"then local q,r=a.getBalance(m.acc,m.pin)if not q then rednet.send(p,{success=false,error=r},b)else rednet.send(p,{success=true,balance=r},b)c(m.atmNumber,"balance",m.acc,nil,r,r)end elseif m.type=="deposit"then local q,s,t=a.deposit(m.acc,m.ids,m.pin)if not q then rednet.send(p,{success=false,error=s},b)else rednet.send(p,{success=true,balance=s},b)c(m.atmNumber,"deposit",m.acc,nil,t,s)end elseif m.type=="withdraw"then local q,u,s=a.withdraw(m.acc,m.amount,m.pin)if not q then rednet.send(p,{success=false,error=u},b)else rednet.send(p,{success=true,ids=u},b)c(m.atmNumber,"withdraw",m.acc,nil,s+m.amount,s)end elseif m.type=="transfer"then if not m.targetAcc then rednet.send(p,{success=false,error="Invalid Request"},b)goto o end;if m.acc==m.targetAcc then rednet.send(p,{success=false,error="Cannot transfer to the same account"},b)goto o end;local q,s=a.transfer(m.acc,m.amount,m.targetAcc,m.pin)if not q then rednet.send(p,{success=false,error=s},b)else rednet.send(p,{success=true,balance=s},b)c(m.atmNumber,"transfer",m.acc,m.targetAcc,s+m.amount,s)end elseif m.type=="checkPin"then rednet.send(p,{success=true,status=a.checkPin(m.acc,m.pin)},b)c(m.atmNumber,m.type,m.acc)elseif m.type=="checkCard"then rednet.send(p,{success=true,status=a.checkCard(m.acc)},b)c(m.atmNumber,m.type,m.acc)end end end;return{StartBankingSystem=n}
